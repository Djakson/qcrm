// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("qcrm").controller("userListCtrl", [
    '$scope', 'User', 'Franchisee', 'City', 'Image', 'Scenario', '$rootScope', '$filter', '$modal', function($scope, User, Franchisee, City, Image, Scenario, $rootScope, $filter, $modal) {
      var ModalUserCtrl, init, load_users;
      $scope.filteredUsers = [];
      $scope.numPerPageOpt = [3, 5, 10, 20];
      $scope.numPerPage = $scope.numPerPageOpt[2];
      $scope.currentPage = 1;
      $scope.currentPageUsers = [];
      $scope.row = '';
      $scope.users = [];
      $scope.cities = City.find();
      $scope.select = function(page) {
        var end, start;
        start = (page - 1) * $scope.numPerPage;
        end = start + $scope.numPerPage;
        if ('undefined' !== typeof $scope.filteredUsers) {
          return $scope.currentPageUsers = $scope.filteredUsers.slice(start, end);
        }
      };
      $scope.onFilterChange = function() {
        $scope.select(1);
        $scope.currentPage = 1;
        return $scope.row = '';
      };
      $scope.onNumPerPageChange = function() {
        $scope.select(1);
        return $scope.currentPage = 1;
      };
      $scope.onOrderChange = function() {
        $scope.select(1);
        return $scope.currentPage = 1;
      };
      $scope.search = function() {
        $scope.filteredUsers = $filter('filter')($scope.users, $scope.searchKeywords);
        return $scope.onFilterChange();
      };
      $scope.$watch('onlyFranchisee', function(value) {
        if (true === value) {
          $scope.filteredUsers = $filter('filter')($scope.users, function(v) {
            var uid;
            try {
              uid = v.franchisee.user_id;
              return "franchisee";
            } catch (_error) {
              return false;
            }
          });
        } else {
          $scope.filteredUsers = $scope.users;
        }
        return $scope.onFilterChange();
      });
      $scope.order = function(rowName) {
        if ($scope.row === rowName) {
          return;
        }
        $scope.row = rowName;
        $scope.filteredUsers = $filter('orderBy')($scope.users, rowName);
        return $scope.onOrderChange();
      };
      /* Редактирование пользователя*/

      $scope.edit = function(user) {
        $scope.user = user;
        return $scope.openDialog();
      };
      $scope.remove = function(user) {
        return angular.forEach($scope.users, function(u, index) {
          var old_sort;
          if (u.id === user.id) {
            User.destroyById({
              id: u.id
            });
            $scope.users.splice(index, 1);
            old_sort = $scope.row;
            $scope.search();
            $scope.order(old_sort);
            return $scope.onOrderChange();
          }
        });
      };
      $scope.add = function() {
        $scope.user = {};
        return $scope.openDialog();
      };
      $scope.openDialog = function() {
        var modalInstance;
        modalInstance = $modal.open({
          templateUrl: 'views/qcrm/admin/user/form.html',
          controller: ModalUserCtrl,
          size: 'lg',
          resolve: {
            user: function() {
              return $scope.user;
            },
            cities: function() {
              return $scope.cities;
            }
          }
        });
        return modalInstance.result.then(function(user) {
          return load_users();
        });
      };
      ModalUserCtrl = function($scope, $modalInstance, user, cities) {
        var ModalScenarioListCtrl;
        $scope.user = user || {};
        $scope.cities = cities;
        $scope.city = cities[0];
        $scope.uploader = $rootScope.uploader;
        $scope.canSubmit = function() {
          return true;
        };
        if (user.franchisee) {
          $scope.city = cities.filter(function(v) {
            return parseInt(v.id) === parseInt(user.franchisee.city_id);
          })[0];
          $scope.franchisee = Franchisee.findOne({
            filter: {
              where: {
                id: user.franchisee.id
              },
              include: "scenarios"
            }
          }, function(franchisee) {
            return angular.forEach($scope.franchisee.scenarios, function(scenario, index) {
              return Scenario.findOne({
                filter: {
                  where: {
                    id: scenario.id
                  },
                  include: "image"
                }
              }, function(scenario) {
                return $scope.franchisee.scenarios[index] = scenario;
              });
            });
          });
        } else {
          $scope.city = {};
        }
        $scope.citySelected = function(city) {
          if ($scope.franchisee) {
            return $scope.franchisee.city_id = city.id.toString();
          }
        };
        $scope.submitForm = function() {
          $scope.user.image_id = $scope.user.image.id;
          delete $scope.user.image;
          delete $scope.user.franchisee;
          $scope.user = User.upsert($scope.user);
          $scope.user.franchisee = Franchisee.upsert($scope.franchisee);
          return $modalInstance.close($scope.user);
        };
        $scope.cancel = function() {
          return $modalInstance.dismiss('cancel');
        };
        $scope.scenariosModal = function() {
          return $modal.open({
            templateUrl: 'views/qcrm/shared/scenario/list__modal.html',
            controller: ModalScenarioListCtrl,
            size: 'lg',
            resolve: {
              selected_scenarios: function() {
                return $scope.franchisee.scenarios;
              },
              franchisee: function() {
                return $scope.franchisee;
              }
            }
          });
        };
        return ModalScenarioListCtrl = function($scope, $modalInstance, selected_scenarios, franchisee) {
          var load_scenarios;
          load_scenarios = function() {
            return Scenario.find({
              filter: {
                include: "image"
              }
            }, function(scenarios) {
              $scope.scenarios = scenarios;
              return angular.forEach(scenarios, function(scenario, index) {
                return angular.forEach(selected_scenarios, (function(scenario, index) {
                  return function(selected) {
                    if (selected.id === scenario.id) {
                      scenario.selected = true;
                      return $scope.scenarios[index] = scenario;
                    }
                  };
                })(scenario, index));
              });
            });
          };
          load_scenarios();
          $scope.addTo = function(scenario) {
            selected_scenarios.push(scenario);
            return Franchisee.prototype$addScenario({
              id: franchisee.id
            }, scenario, function(scenarios) {
              return load_scenarios();
            });
          };
          return $scope.removeFrom = function(scenario) {
            Franchisee.prototype$removeScenario({
              id: franchisee.id
            }, scenario, function(scenarios) {
              return load_scenarios();
            });
            return angular.forEach(selected_scenarios, function(selected, index) {
              if (selected.id === scenario.id) {
                return selected_scenarios.splice(index, 1);
              }
            });
          };
        };
      };
      init = function() {
        $scope.search();
        return $scope.select($scope.currentPage);
      };
      load_users = function() {
        return User.find({
          filter: {
            include: 'image'
          }
        }).$promise.then(function(users) {
          $scope.users = users;
          init();
          return $scope.franchisees = Franchisee.find().$promise.then(function(franchisees) {
            var franchisee, id, user, _i, _len, _ref, _results;
            _ref = $scope.users;
            _results = [];
            for (id = _i = 0, _len = _ref.length; _i < _len; id = ++_i) {
              user = _ref[id];
              _results.push((function() {
                var _j, _len1, _results1;
                _results1 = [];
                for (_j = 0, _len1 = franchisees.length; _j < _len1; _j++) {
                  franchisee = franchisees[_j];
                  _results1.push(Franchisee.user({
                    id: franchisee.id
                  }, (function(user, id, franchisee) {
                    return function(u) {
                      if (u.id === user.id) {
                        user.franchisee = franchisee;
                        return $scope.users[id] = user;
                      }
                    };
                  })(user, id, franchisee)));
                }
                return _results1;
              })());
            }
            return _results;
          });
        });
      };
      return load_users();
    }
  ]);

}).call(this);

/*
//@ sourceMappingURL=userListCtrl.map
*/
