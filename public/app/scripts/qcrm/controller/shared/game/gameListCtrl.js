// Generated by CoffeeScript 1.6.3
(function() {
  angular.module("qcrm").controller("GameListCtrl", [
    "$scope", "$rootScope", "$filter", "$modal", "Game", "Scenario", function($scope, $rootScope, $filter, $modal, Game, Scenario) {
      var ModalGameCtrl, init, load_games;
      $scope.filteredGames = [];
      $scope.numPerPageOpt = [3, 5, 10, 20];
      $scope.numPerPage = $scope.numPerPageOpt[2];
      $scope.currentPage = 1;
      $scope.currentPageGames = [];
      $scope.row = '';
      $scope.games = [];
      $scope.select = function(page) {
        var end, start;
        start = (page - 1) * $scope.numPerPage;
        end = start + $scope.numPerPage;
        if ('undefined' !== typeof $scope.filteredGames) {
          return $scope.currentPageGames = $scope.filteredGames.slice(start, end);
        }
      };
      $scope.onFilterChange = function() {
        $scope.select(1);
        $scope.currentPage = 1;
        return $scope.row = '';
      };
      $scope.onNumPerPageChange = function() {
        $scope.select(1);
        return $scope.currentPage = 1;
      };
      $scope.onOrderChange = function() {
        $scope.select(1);
        return $scope.currentPage = 1;
      };
      $scope.search = function() {
        $scope.filteredGames = $filter('filter')($scope.games, $scope.searchKeywords);
        return $scope.onFilterChange();
      };
      $scope.order = function(rowName) {
        if ($scope.row === rowName) {
          return;
        }
        $scope.row = rowName;
        $scope.filteredGames = $filter('orderBy')($scope.games, rowName);
        return $scope.onOrderChange();
        /*@TODO Редактирование game*/

      };
      $scope.edit = function(game) {
        $scope.game = game;
        return $scope.openDialog();
      };
      $scope.add = function() {
        $scope.game = {};
        return $scope.openDialog();
      };
      $scope.remove = function(game) {
        return angular.forEach($scope.games, function(g, index) {
          var old_sort;
          if (g.id === game.id) {
            Game.destroyById({
              id: g.id
            });
            $scope.games.splice(index, 1);
            old_sort = $scope.row;
            $scope.search();
            $scope.order(old_sort);
            return $scope.onOrderChange();
          }
        });
      };
      $scope.openDialog = function() {
        var modalInstance;
        modalInstance = $modal.open({
          templateUrl: 'views/qcrm/shared/game/form.html',
          controller: ModalGameCtrl,
          size: 'lg',
          resolve: {
            game: function() {
              return $scope.game;
            }
          }
        });
        return modalInstance.result.then(function(game) {
          return load_games();
        });
      };
      ModalGameCtrl = function($scope, $modalInstance, game) {
        var ModalScenarioListCtrl;
        $scope.scenario = game.scenario;
        $scope.mytime = new Date();
        $scope.hstep = 1;
        $scope.mstep = 15;
        $scope.options = {
          hstep: [1, 2, 3],
          mstep: [1, 5, 10, 15, 25, 30]
        };
        $scope.ismeridian = true;
        $scope.toggleMode = function() {
          return $scope.ismeridian = !$scope.ismeridian;
        };
        $scope.update = function() {
          var d;
          d = new Date();
          d.setHours(14);
          d.setMinutes(0);
          return $scope.mytime = d;
        };
        $scope.changed = function() {
          return console.log('Time changed to: ' + $scope.game.time_begin);
        };
        $scope.today = function() {
          return $scope.dt = game.item_date;
        };
        $scope.today();
        $scope.showWeeks = true;
        $scope.toggleWeeks = function() {
          return $scope.showWeeks = !$scope.showWeeks;
        };
        $scope.disabled = function(date, mode) {
          return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
        };
        $scope.toggleMin = function() {
          var _ref;
          return $scope.minDate = (_ref = $scope.minDate) != null ? _ref : {
            "null": new Date()
          };
        };
        $scope.toggleMin();
        $scope.open = function($event) {
          $event.preventDefault();
          $event.stopPropagation();
          return $scope.opened = true;
        };
        $scope.dateOptions = {
          'year-format': "'yy'",
          'starting-day': 1
        };
        $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'shortDate'];
        $scope.format = $scope.formats[0];
        $scope.game = game || {};
        $scope.uploader = $rootScope.uploader;
        $scope.canSubmit = function() {
          return true;
        };
        $scope.scenariosModal = function() {
          var modalInstance;
          modalInstance = $modal.open({
            templateUrl: 'views/qcrm/shared/scenario/list__modal.html',
            controller: ModalScenarioListCtrl,
            size: 'lg',
            resolve: {
              game: function() {
                return $scope.game;
              }
            }
          });
          return modalInstance.result.then(function(game) {
            $scope.game.scenario = game.scenario;
            return $scope.scenario = game.scenario;
          });
        };
        ModalScenarioListCtrl = function($scope, $modalInstance, game) {
          var load_scenarios;
          load_scenarios = function() {
            return Scenario.find({
              filter: {
                include: "image"
              }
            }, function(scenarios) {
              $scope.scenarios = scenarios;
              return angular.forEach(scenarios, function(scenario, index) {
                if (game.scenario.id === scenario.id) {
                  scenario.selected = true;
                  return $scope.scenarios[index] = scenario;
                }
              });
            });
          };
          load_scenarios();
          $scope.addTo = function(scenario) {
            game.scenario = scenario;
            angular.forEach($scope.scenarios, function(scn, index) {
              if (scn.id !== scenario.id) {
                return $scope.scenarios[index].selected = false;
              }
            });
            return scenario.selected = true;
          };
          $scope.removeFrom = function(scenario) {
            scenario.selected = false;
            return game.scenario = null;
          };
          $scope.cancel = function() {
            return $modalInstance.dismiss('cancel');
          };
          return $scope.submitForm = function() {
            return $modalInstance.close(game);
          };
        };
        $scope.submitForm = function() {
          var e;
          try {
            $scope.game.scenario_id = $scope.game.scenario.id;
          } catch (_error) {
            e = _error;
            console.log(e);
          }
          Game.upsert($scope.game, function(g) {
            return console.log(g);
          }, function(err) {
            return console.info(err);
          });
          return $modalInstance.close($scope.game);
        };
        return $scope.cancel = function() {
          return $modalInstance.dismiss('cancel');
        };
      };
      init = function() {
        $scope.search();
        return $scope.select($scope.currentPage);
      };
      load_games = function() {
        return Game.find({}, function(games) {
          $scope.games = games;
          $scope.select(1);
          $scope.currentPage = 1;
          return init();
        });
      };
      return load_games();
    }
  ]);

}).call(this);

/*
//@ sourceMappingURL=gameListCtrl.map
*/
