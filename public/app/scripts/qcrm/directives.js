// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  app = angular.module("qcrm");

  app.directive('userTag', [
    'User', function(User) {
      return {
        restrict: 'AEC',
        templateUrl: '/app/views/qcrm/shared/partials/user_tag.html',
        replace: false,
        scope: {
          model: '='
        },
        link: function(scope, element, attributes) {
          return scope.user = scope.model;
        }
      };
    }
  ]);

  app.directive('gamelead', [
    'Game', 'User', '$modal', function(Game, User, $modal) {
      return {
        restrict: 'AEC',
        templateUrl: '/app/views/qcrm/shared/partials/gamelead.html',
        scope: {
          user: '=model'
        },
        link: function(scope, element, attributes) {
          var ModalUserListCtrl;
          User.findOne({
            filter: {
              where: {
                id: scope.user.id
              },
              include: "image"
            }
          }, function(user) {
            return scope.user = user;
          });
          scope.select = function() {
            var modalInstance;
            modalInstance = $modal.open({
              templateUrl: '/app/views/qcrm/shared/partials/user_dialog_list.html',
              controller: ModalUserListCtrl,
              resolve: {
                selected: function() {
                  return scope.user;
                }
              }
            });
            return modalInstance.result.then(function(user) {
              return scope.user = user;
            });
          };
          return ModalUserListCtrl = function($scope, $modalInstance, selected) {
            User.find({
              filter: {
                include: "image"
              }
            }, function(users) {
              $scope.users = users;
              return angular.forEach($scope.users, function(user, index) {
                if (user.id === selected.id) {
                  return $scope.users[index].selected = true;
                } else {
                  return $scope.users[index].selected = false;
                }
              });
            });
            $scope.selected = selected;
            $scope.choose = function(u) {
              if (u.selected) {
                angular.forEach($scope.users, function(user, index) {
                  if (user.id !== u.id) {
                    return $scope.users[index].selected = false;
                  }
                });
              }
              return $scope.selected = u;
            };
            $scope.select = function() {
              return $modalInstance.close($scope.selected);
            };
            return $scope.cancel = function() {
              return $modalInstance.dismiss('cancel');
            };
          };
        }
      };
    }
  ]);

  /*
  QCRM Media Object Directive
  @example <qmo data-entity="user" data-model="game.lead"></qmo>
  @example <qmo data-entity="game" data-model="game" data-include="['lead', 'scenario', {'scenario':'image'}, {'lead':'image'}]"></qmo>
  @return to template  [entity, media_object]
  */


  app.directive("qmo", [
    "$compile", "$http", "$templateCache", '$timeout', 'User', 'Game', 'Scenario', 'Order', function($compile, $http, $templateCache, $timeout, User, Game, Scenario, Order) {
      var getTemplate, linker;
      getTemplate = function(entity) {
        var baseUrl, templateLoader, templateUrl;
        baseUrl = "/app/views/qcrm/shared/partials/media_object/";
        templateUrl = baseUrl + entity + ".html";
        templateLoader = $http.get(templateUrl, {
          cache: $templateCache
        });
        return templateLoader;
      };
      linker = function(scope, element, attrs) {
        var loader, promise;
        loader = getTemplate(scope.entity);
        return promise = loader.success(function(html) {
          return element.html(html);
        }).then(function(response) {
          var model;
          if ("object" === typeof scope.include) {
            model = eval(ucfirst(scope.entity));
            return model.findOne({
              filter: {
                include: scope.include,
                where: {
                  id: scope.media_object.id
                }
              }
            }, function(media_object) {
              scope.media_object = media_object;
              return element.replaceWith($compile(element.html())(scope));
            });
          } else {
            return element.replaceWith($compile(element.html())(scope));
          }
        });
      };
      return {
        restrict: "AEC",
        scope: {
          entity: "@",
          media_object: "=model",
          include: "="
        },
        link: linker
      };
    }
  ]);

}).call(this);

/*
//@ sourceMappingURL=directives.map
*/
